#!/usr/bin/env zsh
#
# gtomb - a GUI wrapper for Tomb 
# 
# Maintained and written by parazyd <parazyd AT dyne DOT org>
# https://github.com/parazyd/gtomb
# https://github.com/dyne/Tomb
#
# gtomb is experimental software. It still does not work completely as 
# intended and should be used with caution.
#

ver="0.5.1"
TOMBPATH="/usr/local/bin/tomb" # Set this to your tomb executable's path

function _ {
    _clean
}

# {{{ Some pinentry code shamelessly stolen from tomb
# Ask user for a password
# Wraps around the pinentry command, from the GnuPG project, as it
# provides better security and conveniently use the right toolkit.
ask_password() {

    local description="$1"
    local title="${2:-Enter tomb password.}"
    local output
    local password
    local gtkrc
    local theme

    # Distributions have broken wrappers for pinentry: they do
    # implement fallback, but they disrupt the output somehow.  We are
    # better off relying on less intermediaries, so we implement our
    # own fallback mechanisms. Pinentry supported: curses, gtk-2, qt4
    # and x11.

    # make sure LANG is set, default to C
    LANG=${LANG:-C}

    _verbose "asking password with tty=$TTY lc-ctype=$LANG"

    if [[ "$DISPLAY" = "" ]]; then

        if _is_found "pinentry-curses"; then
            _verbose "using pinentry-curses"
            output=`cat <<EOF | pinentry-curses
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE $title
SETDESC $description
SETPROMPT Password:
GETPIN
EOF`
        else
            _failure "Cannot find pinentry-curses and no DISPLAY detected."
        fi

    else # a DISPLAY is found to be active

        # customized gtk2 dialog with a skull (if extras are installed)
        if _is_found "pinentry-gtk-2"; then
            _verbose "using pinentry-gtk2"

            gtkrc=""
            theme=/share/themes/tomb/gtk-2.0-key/gtkrc
            for i in /usr/local /usr; do
                [[ -r $i/$theme ]] && {
                    gtkrc="$i/$theme"
                    break
                }
            done
            [[ "$gtkrc" = "" ]] || {
                gtkrc_old="$GTK2_RC_FILES"
                export GTK2_RC_FILES="$gtkrc"
            }
            output=`cat <<EOF | pinentry-gtk-2
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE $title
SETDESC $description
SETPROMPT Password:
GETPIN
EOF`
            [[ "$gtkrc" = "" ]] || export GTK2_RC_FILES="$gtkrc_old"

            # TODO QT4 customization of dialog
        elif _is_found "pinentry-qt4"; then
            _verbose "using pinentry-qt4"

            output=`cat <<EOF | pinentry-qt4
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE $title
SETDESC $description
SETPROMPT Password:
GETPIN
EOF`

            # TODO X11 customization of dialog
        elif _is_found "pinentry-x11"; then
            _verbose "using pinentry-x11"

            output=`cat <<EOF | pinentry-x11
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE $title
SETDESC $description
SETPROMPT Password:
GETPIN
EOF`

        else

            if _is_found "pinentry-curses"; then
                _verbose "using pinentry-curses"

                _warning "Detected DISPLAY, but only pinentry-curses is found."
                output=`cat <<EOF | pinentry-curses
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE $title
SETDESC $description
SETPROMPT Password:
GETPIN
EOF`
            else
                _failure "Cannot find any pinentry: impossible to ask for password."
            fi

        fi

    fi # end of DISPLAY block

    # parse the pinentry output
    for i in ${(f)output}; do
        [[ "$i" =~ "^ERR.*" ]] && {
            _warning "Pinentry error: ::1 error::" ${i[(w)3]}
            print "canceled"
            return 1 }

        # here the password is found
        [[ "$i" =~ "^D .*" ]] && password="${i##D }"
    done

    [[ "$password" = "" ]] && {
        _warning "Empty password"
        print "empty"
        return 1 }

    print "$password"
    return 0
}

_is_found() {
    # returns 0 if binary is found in path
    [[ "$1" = "" ]] && return 1
    command -v "$1" 1>/dev/null 2>/dev/null
    return $?
}

function _warning  no() {
    option_is_set -q || _msg warning $@
    return 1
}

function _verbose xxx() {
    option_is_set -D && _msg verbose $@
    return 0
}

function _failure die() {
    typeset -i exitcode=${exitv:-1}
    option_is_set -q || _msg failure $@
    # be sure we forget the secrets we were told
    exit $exitcode
}
# }}}

# {{{ _clean - Clean function, removes sensitive stuff from memory
function _clean {
     local rr="$RANDOM"
     while [[ ${#rr} -lt 500 ]]; do
        rr+="$RANDOM"
    done

    command="$rr";      unset command
    tombname="$rr";     unset tombname
    tombsize="$rr";     unset tombsize
    keyfile="$rr";      unset keyfile
    sudoassword="$rr";  unset sudoassword
    tombtmp=/tmp/tombtmp
    if [ -f $tombtmp ]
    then
        dd if=/dev/urandom of=$tombtmp bs=800 count=1
        rm -f $tombtmp # See for srm/wipe/etc.
    fi
    tombtmp="$rr";      unset tombtmp
    newkey="$rr";       unset newkey
    jpegfile="$rr";     unset jpegfile
}
# }}}

# {{{ _main - Main window
function _main {
    _clean
    command=`zenity \
        --window-icon="monmort.png" \
        --title="gtomb" \
        --width=640 \
        --height=420 \
        --list \
        --text="gtomb v$ver\nThe GUI wrapper for Tomb, the crypto undertaker." \
        --separator=" & " \
        --column=Function \
        --column=Description \
        "create" "Create a new tomb, forge its key and lock the tomb" \
        "dig" "Dig a new tomb of chosen size" \
        "forge" "Forge a new key used to lock tombs" \
        "lock" "Lock a non-locked tomb using an existing key" \
        "open" "Open an existing tomb" \
        "list" "List all open tombs and information on them" \
        "close" "Close a specific tomb (or all)" \
        "slam" "Slam a tomb (or all) killing all programs using it" \
        "resize" "Resize a tomb to a new size (can only grow)" \
        "passwd" "Change the password of a key" \
        "setkey" "Forge a new key and change the key of an existing tomb" \
        "engrave" "Generates a QR code of a key to be saved on paper" \
        "bury" "Hide a key inside a JPEG image" \
        "exhume" "Extract a key from a JPEG image"`

    eval "_$command"
}
# }}}

# {{{ create - All in one: Tomb creation, key forge and tomb lock.
function _create {
    tombname=`zenity \
        --title="Choose where to dig your tomb" \
        --window-icon="monmort.png" \
        --file-selection \
        --filename="secret.tomb" \
        --save`

    case $? in
        0)
            tombsize=`zenity \
                --title="Tomb Creation" \
                --window-icon="monmort.png" \
                --entry \
                --text="A tomb must be min. 10MiB in size." \
                --entry-text=10`

            case $? in
                0)
                    $TOMBPATH dig -s $tombsize $tombname | \
                        zenity \
                        --title="Digging tomb" \
                        --window-icon="monmort.png" \
                        --text="Please wait while your tomb is being dug." \
                        --progress \
                        --auto-close \
                        --pulsate

                    zenity \
                        --title="Done digging" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="Your tomb has been dug. Now we will forge a key."

                    keyfile=`zenity \
                        --title="Choose where to forge your key" \
                        --window-icon="monmort.png" \
                        --file-selection \
                        --filename="secret.tomb.key" \
                        --save`

                    case $? in
                        0)
                            $TOMBPATH forge $keyfile | \
                                zenity \
                                    --title="Forging key" \
                                    --window-icon="monmort.png" \
                                    --text="Please wait while your key is being forged.\n\
                                        You can move your mouse around and use your computer to speed up the process." \
                                    --progress \
                                    --auto-close \
                                    --pulsate

                            zenity \
                                --title="Done forging" \
                                --window-icon="monmort.png" \
                                --info \
                                --text="Your key is now forged. Time to lock the tomb."

                            # Ask for sudo password via pinentry and remove pass from memory afterwards.
                            sudoassword=$(ask_password "Insert sudo password for user $USER")
                                echo -e "$sudoassword\n" | sudo -S $TOMBPATH lock $tombname -k $keyfile | \
                                sudoassword=$(ask_password "Insert sudo password for user $USER")
                                zenity \
                                    --title="Locking tomb" \
                                    --window-icon="monmort.png" \
                                    --text="Please wait while your new tomb is being formatted." \
                                    --progress \
                                    --auto-close \
                                    --pulsate

                            _clean # Clean sensitive stuff from memory

                            zenity \
                                --title="Succes" \
                                --window-icon="monmort.png" \
                                --info \
                                --text="Tomb locked!"

                            _main
                            ;;
                        1)
                            _main
                            ;;
                    esac
                    ;;
                1)
                   exec _main
                   ;; 
            esac
            ;;
        1)
            exec _main
            ;;
    esac
}
# }}}

# {{{ dig - Dig a new tomb
function _dig {
    tombname=`zenity \
        --title="Choose where to dig your tomb" \
        --window-icon="monmort.png" \
        --file-selection \
        --filename="secret.tomb" \
        --save`

    if [[ -f $tombname ]]; then
        zenity \
            --title="Error!" \
            --window-icon="monmort.png" \
            --error \
            --text="This tomb already exists. I'm not digging here."
            exec _main
    fi

    case $? in
        0)
            tombsize=`zenity \
                --title="Tomb digging" \
                --window-icon="monmort.png" \
                --entry \
                --text="Enter the size of your tomb in MiB (min. 10 MiB):" \
                --entry-text=10`

            case $? in
                0)
                    $TOMBPATH dig -s $tombsize $tombname | \
                        zenity \
                            --title="Digging new tomb" \
                            --window-icon="monmort.png" \
                            --text="Please wait while your tomb is being dug." \
                            --progress \
                            --auto-close \
                            --pulsate &

                    PID_ZEN=$(ps -C zenity h -o pid,command | grep "Digging new tomb" | awk '{print $1}')

                    while [ "$PID_ZEN" != "" ]; do
                        PID_ZEN=$(ps h -o pid -p ${PID_ZEN})
                        PID_DD=$(ps -C dd h -o pid,command | grep "$tombname" | awk '{print $1}')

                        #PID_DD=$(ps -C dd h -o pid,command | grep " of=" | awk '{print $1}')
                                                            # ^ unsafe for other dds
                                                            # doesn't work when using
                                                            # a var like $tombname
                                                            # sometimes
                        sleep 2 # test out
                    done

                    if [[ "$PID_DD" != "" && "$PID_ZEN" == "" ]]; then

                        kill -9 $PID_DD

                        zenity \
                            --title="Canceled!" \
                            --window-icon="monmort.png" \
                            --text="Tomb digging canceled." \
                            --warning

                        rm -f $tombname # try srm/wipe
                        exec _main
                    fi

                    _clean # Clean sensitive stuff from memory

                    zenity \
                        --title="Done digging" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="Your tomb has been dug."

                    exec _main
                    ;;
                1)
                    zenity \
                        --title="Canceled" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="Tomb digging canceled."

                    exec _main
                    ;;
                1)
                    exec _main
                    ;;
            esac
            ;;
        1)
            exec _main
            ;;
    esac
}
# }}}

# {{{ forge - Forge a new key
function _forge {
    keyfile=`zenity \
        --title="Choose where to forge your key" \
        --window-icon="monmort.png" \
        --file-selection \
        --filename="secret.tomb.key" \
        --save`

    case $? in
        0)
            $TOMBPATH forge $keyfile | \
                zenity \
                    --title="Forging key" \
                    --window-icon="monmort.png" \
                    --text="Please wait while your key is being forged.\n\
                    You can move your mouse around and use your computer to speed up the process." \
                    --progress \
                    --auto-close \
                    --pulsate

            if [[ $? == 1 ]]; then
                killall dd # possibly unsafe

                zenity \
                    --title="Canceled!" \
                    --window-icon="monmort.png" \
                    --text="Forging canceled." \
                    --warning

                rm -f $keyfile
                exec _main
            fi

            _clean # Clean sensitive stuff from memory

            zenity \
                --title="Done forging" \
                --window-icon="monmort.png" \
                --info \
                --text="Your key is now forged."

            _main
            eval "_$command"
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ lock - Lock a non-locked tomb
function _lock {
    tombname=`zenity \
        --title="Select tomb to lock" \
        --window-icon="monmort.png" \
        --file-selection`
    
    case $? in
        0)
            keyfile=`zenity \
                --title="Choose the key for your tomb" \
                --window-icon="monmort.png" \
                --file-selection`

            case $? in
                0)  
                    sudoassword=$(ask_password "Insert sudo password for user $USER")
                    echo -e "$sudoassword\n" | sudo -S $TOMBPATH lock $tombname -k $keyfile | \
                        zenity \
                            --title="Locking your tomb..." \
                            --window-icon="monmort.png" \
                            --text="Please wait while your tomb is being locked." \
                            --progress \
                            --auto-close \
                            --pulsate

                    _clean # Clean sensitive stuff from memory

                    zenity \
                        --title="Done locking" \
                        --window-icon=monmort.png \
                        --info \
                        --text="Your tomb is now locked."

                    _main
                    eval "_$command"
                    ;;
                1)
                    _main
                    eval "_$command"
                    ;;
            esac
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ open - Open an existing tomb
function _open {
    tombname=`zenity \
        --title="Choose a tomb to open" \
        --window-icon="monmort.png" \
        --file-selection`

    case $? in
        0)
            keyfile=`zenity \
                --title="Choose the key for your tomb" \
                --window-icon="monmort.png" \
                --file-selection`

            case $? in
                0)
                    sudoassword=$(ask_password "Insert sudo password for user $USER")
                    echo -e "$sudoassword\n" | sudo -S $TOMBPATH open $tombname -k $keyfile

                    _clean # Clean sensitive stuff from memory

                    zenity \
                        --title="Success" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="Your tomb is now open."

                    _main
                    eval "_$command";;
                1)
                    _main
                    eval "_$command";;
            esac
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ list - list all open tombs, along with their mountpoint
function _list {
    tombtmp="/tmp/tombtmp"
    $TOMBPATH list --get-mountpoint > $tombtmp
    tombname=`cat $tombtmp | \
        sed 's/.*\/\([^\/]*\)$/\1\n &/' | \
        zenity \
            --title="Currently open tombs" \
            --window-icon="monmort.png" \
            --width=640 --height=380 --list \
            --separator=" & " \
            --text="Here are your open tombs" \
            --column=Tomb \
            --column=Path `

    case $? in
        0)
            _clean
            _main
            eval "_$command"
            ;;
        1)
            _clean
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ close - Close open tomb(s)
function _close {
    tombtmp="/tmp/tombtmp"
    $TOMBPATH list --get-mountpoint > $tombtmp
    echo "/all" >> $tombtmp
    tombname=`cat $tombtmp | \
        sed 's/.*\/\([^\/]*\)$/\1\n &/' | \
        zenity \
            --title="Choose a tomb to close" \
            --window-icon="monmort.png" \
            --width=640 --height=380 --list \
            --separator=" & " \
            --column=Tomb \
            --column=Path `

        case $? in
            0)
                # Ask for sudo password via pinentry and remove pass from memory afterwards.
                sudoassword=$(ask_password "Insert sudo password for user $USER")
                echo -e "$sudoassword\n" | sudo -S $TOMBPATH close $tombname

                _clean # Clean sensitive stuff from memory

                zenity \
                    --title="Success" \
                    --window-icon="monmort.png" \
                    --info \
                    --text="Closed successfully!"

                _main
                eval "_$command"
                ;;
            1)
                _main
                eval "_$command"
                ;;
        esac
}
# }}}

# {{{ slam - Slam open tombs
function _slam {
    tombtmp="/tmp/tombtmp"
    $TOMBPATH list --get-mountpoint > $tombtmp
    echo "/all" >> $tombtmp
    tombname=`cat $tombtmp | \
        sed 's/.*\/\([^\/]*\)$/\1\n &/' | \
        zenity \
            --title="Choose a tomb to slam" \
            --window-icon="monmort.png" \
            --width=640 --height=380 --list \
            --separator=" & " \
            --column=Tomb \
            --column=Path `

        case $? in
            0)
                # Ask for sudo password via pinentry and remove pass from memory afterwards.
                sudoassword=$(ask_password "Insert sudo password for user $USER")
                echo -e "$sudoassword\n" | sudo -S $TOMBPATH slam $tombname

                _clean # Clean sensitive stuff from memory

                zenity \
                    --title="Success" \
                    --window-icon="monmort.png" \
                    --info \
                    --text="Tomb slammed successfully!"

                _main
                eval "_$command"
                ;;
            1)
                _main
                eval "_$command"
                ;;
        esac
}
# }}}

# {{{ resize - Resize an existing *closed* tomb
function _resize {
    tombname=`zenity \
        --title="Choose a tomb to resize" \
        --window-icon="monmort.png" \
        --file-selection`

    case $? in
        0)
            tombsize=`zenity \
                --title="New tomb size" \
                --window-icon="monmort.png" \
                --entry \
                --text="Enter new size of your tomb in MiB. Must be larger than current value." \
                --entry-text=100`
            case $? in
                0)
                    keyfile=`zenity \
                        --title="Choose according keyfile" \
                        --window-icon="monmort.png" \
                        --file-selection`
                    case $? in
                        0)
                            sudoassword=$(ask_password "Insert sudo password for user $USER")
                            echo -e "$sudoassword\n" | sudo -S $TOMBPATH resize \
                                $tombname -s $tombsize -k $keyfile

                            _clean # Clean sensitive stuff from memory

                            zenity \
                                --title="Success" \
                                --window-icon="monmort.png" \
                                --info \
                                --text="Tomb resized successfully"

                            _main
                            eval "_$command"
                            ;;
                        1)
                            _main
                            eval "_$command"
                            ;;
                    esac
                    ;;
                1)
                    _main
                    eval "_$command"
                    ;;
            esac
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ passwd - Change existing key's passphrase
function _passwd {
    keyfile=`zenity \
        --title="Choose a keyfile" \
        --window-icon="monmort.png" \
        --file-selection` 

    case $? in
        0)
            $TOMBPATH passwd -k $keyfile
            
            _clean # Clean sensitive stuff from memory

            zenity \
                --title="Success" \
                --window-icon="monmort.png" \
                --info \
                --text="Password successfully changed!"

            _main
            eval "_$command"
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ setkey - Change a tomb's keyfile
function setkey {
    tombname=`zenity \
        --title="Choose a tomb to change its keyfile" \
        --window-icon="monmort.png" \
        --file-selection`

    case $? in
        0)
            keyfile=`zenity \
                --title="Choose your tomb's old keyfile" \
                --window-icon="monmort.png" \
                --file-selection`

            case $? in
                0)
                    newkey=`zenity \
                        --title="Choose your tomb's new keyfile" \
                        --window-icon="monmort.png" \
                        --file-selection`

                    case $? in
                        0)
                            sudoassword=$(ask_password "Insert sudo password for $USER")
                            echo -e "$sudoassword\n" | sudo -S $TOMBPATH setkey \
                                -k $newkey $keyfile $tombname | \
                                zenity \
                                    --title="Changing key"
                                    --window-icon="monmort.png" \
                                    --text="Please wait while your tomb's key is being changed." \
                                    --progress \
                                    --auto-close \
                                    --pulsate

                            _clean

                            zenity \
                                --title="Success" \
                                --window-icon="monmort.png" \
                                --info \
                                --text="Tomb's keyfile successfully changed!"

                            _main
                            eval "_$command"
                            ;;
                        1)
                            _main
                            eval "_$command"
                            ;;
                    esac
                    ;;
                1)
                    _main
                    eval "_$command"
                    ;;
            esac
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ engrave - generate QR code of a key FIX
function _engrave {
    keyfile=`zenity \
        --title="Choose keyfile to engrave" \
        --window-icon="monmort.png" \
        --file-selection`

    case $? in
        0)
            jpegfile=`zenity \
                --title="Choose where to save keyfile (PNG format)" \
                --window-icon="monmort.png" \
                --file-selection \
                --save`
            
            case $? in
                0)
                    awk '/^-----/ {next}; /^Version/ {next}; {print $0}' $keyfile \
                        | qrencode --size 4 --level H --casesensitive -o $jpegfile
                    
                    zenity \
                        --title="Success" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="QR code generated in $jpegfile"

                    _main
                    eval "_$command"
                    ;;
                1)
                    _main
                    eval "_$command"
                    ;;
            esac
            ;;
        1)
            _main
            eval "_$command"
            ;;
    esac
}
# }}}

# {{{ bury - hide a keyfile in a JPEG image
function bury {
    keyfile=`zenity \
        --title="Choose keyfile" \
        --window-icon="monmort.png" \
        --file-selection`

    case $? in
        0)
            jpegfile=`zenity \
                --title="Choose JPEG file" \
                --window-icon="monmort.png" \
                --file-selection`

            case $? in
                0)
                    $TOMBPATH bury -k $keyfile $jpegfile
                    zenity \
                        --title="Success" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="Your key is how hidden in $jpegfile"

                    _clean # Clean sensitive stuff from memory

                    _main
                    eval "_$command"
                    ;;
                1)
                    _main
                    eval "_$command"
                    ;;
            esac
            ;;
        1)
            _main
            "_$command"
            ;;
    esac
}
# }}}

# {{{ exhume - extract keyfile from JPEG
function exhume {
    jpegfile=`zenity \
        --title="Choose JPEG file" \
        --window-icon="monmort.png" \
        --file-selection`

    case $? in
        0)
            keyfile=`zenity \
                --title="Choose where to extract your key" \
                --window-icon="monmort.png" \
                --file-selection \
                --save`

            case $? in
                0)
                    $TOMBPATH exhume -k $keyfile $jpegfile

                    zenity \
                        --title="Success" \
                        --window-icon="monmort.png" \
                        --info \
                        --text="Your keyfile is extracted to $keyfile"

                    _clean # Clean sensitive stuff from memory

                    _main
                    eval "_$command"
                    ;;
                1)
                    _main
                    eval "_$command"
                    ;;
            esac
            ;;
        1)
            _main
            "_$command"
            ;;
    esac
}
# }}}

_main
