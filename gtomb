#!/usr/bin/env bash
#
# gtomb - a wrapper for Tomb 
# https://github.com/parazyd/gtomb
# https://github.com/dyne/Tomb

function main {
command=`zenity --title="gtomb - A GUI wrapper for Tomb" \
    --width=640 --height=380 --list \
    --separator=" & " \
    --column=Function \
    --column=Description \
    "create" "Create a new tomb, forge its key and lock the tomb" \
    "open" "Open an existing tomb" \
    "list" "List all open tombs and information on them" \
    "close" "Close a specific tomb (or all)" \
    "slam" "Slam a tomb (or all) killing all programs using it" \
    "resize" "Resize a tomb to a new size (can only grow)" \
    "passwd" "Change the password of a key" \
    "setkey" "Forge a new key and change the key of an existing tomb" \
    "engrave" "Generates a QR code of a key to be saved on paper" \
    "bury" "Hide a key inside a JPEG image" \
    "exhume" "Extract a key from a JPEG image"`
}

function create {
    filename=`zenity --file-selection --title="Choose where to dig your tomb" \
        --filename="secret.tomb" \
        --save`
    case $? in
        0)
            tombsize=`zenity --entry --title="Tomb Creation" \
                --text="Tomb must be min. 10MB" \
                --entry-text=10`
            case $? in
                0)
                    tomb dig -s $tombsize $filename | \
                        zenity --progress --title="Digging tomb" \
                        --text="Please wait while your tomb is dug." \
                        --auto-close \
                        --pulsate
                    zenity --info --title="Done digging" \
                        --text="Your tomb is dug. Now we will forge a key"
                    keyname=`zenity --file-selection --title="Choose where to forge your key" \
                        --filename="secret.tomb.key" \
                        --save`
                    tomb forge $keyname | \
                        zenity --progress --title="Forging key" \
                        --text="Please wait while your key is being forged." \
                        --auto-close \
                        --pulsate
                    zenity --info --title="Done forging" \
                        --text="Your key is now forged. Time to lock the tomb."
                    ;;
                    # Wait for upstream issue resolve --sudo-pwd
                1)
                   main
                   eval $command;; 
            esac;;
        1)
            main
            eval $command;;
    esac
}

function open {
    # --sudo-pwd issue
    tombfile=`zenity --title="Choose a tomb to open" \
        --file-selection`
    case $? in
        0)
            keyfile=`zenity --title="Choose the key for your tomb" \
                --file-selection`
            case $? in
                0)
                    tomb open $tombfile -k $keyfile
                    zenity --title="Success" --info \
                        --text="Your tomb is now open."
                    main
                    eval $command;;
                1)
                    main
                    eval $command;;
            esac;;
        1)
            main
            eval $command;;
    esac
}

function list {
    # Bugged without --get-mountpoint. Find out how to resolve.
    tmpfile=/tmp/tombtmp
    tomb list --get-mountpoint > $tmpfile
    zenity --text-info --title="List of mounted tombs" \
        --width=800 \
        --height=600 \
        --filename=$tmpfile

    case $? in
        0)
            rm -f $tmpfile
            main
            eval $command;;
        1)
            rm -f $tmpfile
            main
            eval $command;;
    esac
}

function close {
    # --sudo-pwd issue
    $tombpath=`zenity --title="Choose a tomb to close" \
        --file-selection --directory`
    case $? in
        0)
            tomb close $tombpath
            main
            eval $command;;
        1)
            main
            eval $command;;
    esac
}

function slam {
    # --sudo-pwd issue
    zenity --question --title="Slammin'" \
        --text="Do you want to slam all tombs?"
    case $? in
        0)
            tomb slam all
            main
            eval $command;;
        1)
            $tombpath=`zenity --title="Choose a tomb to slam" \
                --file-selection --directory`
            case $? in
                0)
                    tomb slam $tombpath
                    main
                    eval $command;;
                1)
                    main
                    eval $command;;
            esac;;
    esac
}

function resize {
    # --sudo-pwd issue
    $tombfile=`zenity --title="Choose a tomb to resize" \
        --file-selection`
    case $? in
        0)
            $newsize=`zenity --title="New tomb size" \
                --entry \
                --text="Enter new size of your tomb. Must be larger than current value."
            case $? in
                0)
                    $keyfile=`zenity --title="Choose according keyfile" \
                        --file-selection`
                    case $? in
                        0)
                            tomb resize $tombfile -s $newsize -k $keyfile
                            main
                            eval $command;;
                        1)
                            main
                            eval $command;;
                    esac;;
                1)
                    main
                    eval $command;;
            esac;;
        1)
            main
            eval $command;;
    esac
}

function passwd {
    keyfile=`zenity --file-selection --title="Choose a keyfile"` 
    case $? in
        0)
            tomb passwd -k $keyfile
            zenity --info --title="Success" \
                --text="Password successfully changed!"
            main
            eval $command;;
        1)
            main
            eval $command;;
    esac
}

function setkey {
    # --sudo-pwd issue
    echo '1'
}

function engrave {
    # output path issue
    echo '1'
}

function bury {
    keyfile=`zenity --title="Choose keyfile" --file-selection`
    case $? in
        0)
            jpegfile=`zenity --title="Choose JPEG file" --file-selection`
            case $? in
                0)
                    tomb bury -k $keyfile $jpegfile
                    zenity --info --title="Success" \
                        --text="Your key is how hidden in $jpegfile"
                    main
                    eval $command;;
                1)
                    main
                    eval $command;;
            esac;;
        1)
            main
            $command;;
    esac
}

function exhume {
    jpegfile=`zenity --title="Choose JPEG file" --file-selection`
    case $? in
        0)
            keyfile=`zenity --title="Choose where to extract your key" \
                --file-selection \
                --save`
            case $? in
                0)
                    tomb exhume -k $keyfile $jpegfile
                    zenity --info --title="Success" \
                        --text="Your keyfile is extracted to $keyfile"
                    main
                    eval $command;;
                1)
                    main
                    eval $command;;
            esac;;
        1)
            main
            $command;;
    esac
}
main
eval "$command"
